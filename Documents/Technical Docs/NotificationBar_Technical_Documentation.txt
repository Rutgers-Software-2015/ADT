*************************************************************************
*************************************************************************
*************                                               *************
*************            Technical Documentation            *************
*************                                               *************
*************               Notification Bar                *************
*************                                               *************
*************************************************************************
*************************************************************************

*************************************************************************
****************        NotificationHandler.java  	    *****************
*************************************************************************

Purpose:
	The purpose of this class is to handle incoming and outgoing
	notifications, the creation of new notifications and the
	deletion of existing notifications

Contents:
1) reconnect()
2) getNotifications()
3) sendMessage(String target, String message, int type)
4) removeMessage(NotificationEntry entry) 

Function: int reconnect()
	
		@return = int
		@param = none
	
	This function is called by the notification handler timer
	automatically every 15 seconds. but can also be called manually.
	It checks if the connection is valid, if it is, returns 0. If
	its not, it attempts to reconnect and if it is successful, returns
	0 and if not returns 1.
	
Function: LinkedList<NotificationEntry> getNotifications()
	
		@return = LinkedList<NotificationEntry> 
		@param = none
	
	This function requests all of the data from the notification
	table in the database. It organizes it all into NotificationEntry
	objects, which contain the destination of the notification and
	the message of the notification, as well as the formatting for
	the entry to display on the notification bar. Once formatted
	into a NotificationEntry object, it is pushed into a LinkedList
	and returned to the NotificationOverlay, where it is displayed
	in the notification bar. This is also called every 15 seconds
	and can be called by hitting the refresh icon on the notification
	bar.
	
Function: int sendMessage(String target, String message, int type)
	
		@return = int
		@param = String, String, int
	
	This function allows you to send a notification to an individual,
	to a group or to all employees. The target parameter is the destination,
	which can be an employee ID or a group name. The type parameter
	is to specify a group or private message, which is made easy by
	the NotificaitonGUI. It then pushes the notification into the
	notification table within the database.
	
Function: int removeMessage(NotificationEntry entry)
	
		@return = int
		@param = NotificationEntry
	
	This function allows acknowledgement of a notification. This
	function is called by clicking on a notification within the
	notification bar. Once clicked, the NotificationEntry sends
	itself into the removeMessage function, where it is deleted
	in the databse. When the NotificationGUI is refreshed, the 
	notification will disappear.