*************************************************************************
*************************************************************************
*************                                               *************
*************             Technical Documentation           *************
*************                                               *************
*************                    Manager                    *************
*************                                               *************
*************************************************************************
*************************************************************************

*************************************************************************
*************              EmployeeHandler.java  	        *************
*************************************************************************
Purpose:
	The purpose of the class is to handle the backend functions of Employee
	management. All of the functions listed bellow are binded to a button
	in the EmployeeWindow.java file. When those buttons are clicked these
	functions are called to perform the operation. 

Contents:
1) getEmployees()
2) addEmployee()
3) fireEmployee()
4) updateEmployee();

Function: Vector<EmpObj> getEmployees() throws SQLException
	
		@return = Vector<EmpObj>
		@param = none
		@Exceptions = SQLException
	
	This function will query the database for all employees within
	the MySQL table "EmployeeList". It will package the information
	contained within each row of the EmployeeList table into an EmpObj
	and place all EmpObj into a Vector to be returned. The returned 
	vector is used in the GUI to generate various lists in the GUI.
	
Function: public void addEmployee(EmpObj E)

		@return none
		@param EmpObj
		
	This function will take in an EmpObj which holds all the information
	of an employee. It will parse the EmpObj to obtain the various fields
	and format them into the proper types that can be passed to the database.
	Once the EmpObj is parsed, it will set up the appropriate SQL Insert
	statement and add the new employee to the database. 

Function: public void fireEmployee(String[] NameAndReason)

		@return none
		@param String[]
	
	This function serves to fire an employee from the restaurant. It is passed
	a String[] of size 2, where the first element is the employee name and the
	second element is the reason due to which the employee was fired. The passed 
	String[] is parsed and the contents are passed to a SQL Update statement which
	will alter the EmployeeList table in the Database. It will update the availibility 
	of the employee to not availible, but will keep the employee visible. It will also
	update the fire_reason field in the database with the reason given.

Function: public void updateEmployee(EmpObj e)

		@return none
		@param EmpObj
		
	The function serves to update the current employee information in the database. It is passed
	an employee object from which it draws information about the employee and rewrites the
	employees row in the database.
	
	
*************************************************************************
*************              FinancialHandler.java  	        *************
*************************************************************************
Purpose:
	The purpose of this class is to handle to financial data availible 
	in the database and package the information into arrays to be used
	later.

Contents:
1) getItems()
2) getAmounts()
3) getDay()
4) getMenuItems()

Function: public String[] getItems()

		@return String[]
		@param none
	
	The function serves to retrieves the "Item_Name" column from the 
	OrderHistory table in the Database. The function is used as helper
	function. 
	
Function: public int[] getAmounts()

		@return int[]
		@param none
		
	This function serves to retrieve all of the food amounts sold
	as stored within the OrderHistory table with the database. This
	function is used a help function.
	
Function: public String[] getDay()

		@return String
		@param = none
		
	This function serves to retrieve all values from the Day column from
	the OrderHistory table within the database. This function is a helper 
	function.
	
*************************************************************************
*************              FinDataGenerator.java  	        *************
*************************************************************************
Purpose:
	The purpose of this class is to organize the financial date of the 
	restaurant into a graphable format. It contains arrays named as the
	days of the week which are of length equal to the number of items in 
	the menu and filled with the amount of each item.

Contents:
1) organizeData()

Function: public void organizeData()
	@param none
	@return none
	
	This function serves to recieve the data handled by the financial
	handler and organize the information to be used later. It organizes the 
	food ordered data into seperate day arrays which are indexed by the item name.
	The data will be organized so it may be graphed later.
	
*************************************************************************
*************              MenuHandler.java  	        *************
*************************************************************************
Purpose:
	The purpose of this class is to organize the resturant menu into
	a JTable in order to allow for easy addition, removal, or editing 
	of resturant items. The data is retreived from the database and
	organized into a distinct table. 

Contents:
1) getMenu()
2) getMenuID()
3) getMenuName()
4) getMenuPrice()
5) getMenuCost()
6) getMenuIngredients()
7) getMenuDescription()
8) getMenuSection()
9) getMenuisValid()
10) AddMenuItem()
11) RemoveMenuItem()
12) EditMenuItem() 

Function: public String[] getMenu()

		@return String[]
		@param none
	
	The function serves to retrieve the all the columns from the 
	Menu table in the Database and puts it into
	an array. 
	
Function: public Integer[] getMenuID()

		@return Integer[]
		@param none
	
	The function serves to retrieve the column from the database
	that contains the menu IDs and puts it into
	an array. 
	
Function: public String[] getMenuName()

		@return String[]
		@param none
	
	The function serves to retrieve the column from the database
	that contains the menu item names and puts it into
	an array. 
	
Function: public Double[] getMenuPrice()

		@return Double[]
		@param none
	
	The function serves to retrieve the column from the database
	that contains the menu item prices and puts it into
	an array.	
	
Function: public Double[] getMenuCost()

		@return Double[]
		@param none
	
	The function serves to retrieve the column from the database
	that contains the menu item costs and puts it into
	an array.	
	
Function: public String[] getMenuIngredients()

		@return String[]
		@param none
	
	The function serves to retrieve the column from the database
	that contains the menu item ingredients and puts it into
	an array.

Function: public String[] getMenuDescription()

		@return String[]
		@param none
	
	The function serves to retrieve the column from the database
	that contains the menu item description and puts it into
	an array.
	
Function: public String[] getMenuSection()

		@return String[]
		@param none
	
	The function serves to retrieve the column from the database
	that contains the menu item section and puts it into
	an array.	
	
Function: public Int[] getMenuisValid()

		@return Int[]
		@param none
	
	The function serves to retrieve the column from the database
	that contains the validity of the menu item and puts it into
	an array.	
	
Function: public void AddMenuItem(MenuObj E)

		@return none
		@param MenuObj E
	
	The function inputs the MenuObj and adds it to the menu
	table in the database. 
	
Function: public void RemoveMenuItem(String name)

		@return none
		@param String name
	
	The function inputs the name of the menu item, searches for
	it in the menu database table and removes it. 
	
Function: public void UpdateMenuItem(MenuObj E)

		@return none
		@param MenuObj E
	
	The function inputs the MenuObj and edits the parameters of 
	the row it lies in the database table.
	
*************************************************************************
*************              InventoryHandler.java  	    *************
*************************************************************************

Purpose:
	The purpose of this class is to organize the inventory into
	a JTable in order to allow for easy incrementation / 
	decremanation of inventory item quantities, addition of items, 
	and removal of items.
	
Functions: 
	1) getInventoryName()
	2) getInventoryQ()
	3) updateInventoryValue(int newQuantity, String item)
	4) AddInventoryValue(String Ingredient, int newQuantity)
	5) RemoveInventoryValue(String Ingredient)
	
Function: public String[] getInventoryName()

		@return String[]
		@param none
	
	The function serves to retreive	the column from the database
	that contains the inventory item names and puts it into
	an array.
	
Function: public Integer[] getInventoryQ()

		@return Integer[]
		@param none
		
	The function serves to retreive	the column from the database
	that contains the inventory item quantities and puts it into
	an array.
	
Function: public void AddInventoryValue(String Ingredient, int newQuantity)

		@return none
		@param MenuObj E
	
	The function inputs the name of the ingredient and the amount 
	that needs to be added or subtracted from the item, performs 
	the calculation, and updates the database. 
	
Function: public void RemoveInventoryValue(String Ingredient)

		@return none
		@param String name
	
	The function inputs the name of the ingredient, and
	and removes the column it lies in from the database. 
	
Function: public void UpdateMenuItem(MenuObj E)

		@return none
		@param MenuObj E
	
	The function inputs the name of the ingredient and the amount 
	that needs to be added or subtracted from the item, performs 
	the calculation, and updates the database. 
